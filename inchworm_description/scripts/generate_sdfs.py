#!/usr/bin/env python3

import glob, subprocess, rospkg

import xml.etree.ElementTree as ET

def insertXacroMacro(sdf, name):
  '''
  Takes in an SDF, and wraps everything in <sdf></sdf> in a xacro:macro
  '''

  tree = ET.fromstring(sdf)

  root = tree.getchildren()[0]
  root.tag = "xacro:macro"
  root["name"] = name

  new_root = ET.Element('sdf')
  new_root["version"] = "1.7"

  new_root.insert(0, root)

  return ET.tostring(new_root)

def main():
  '''
  The purpose of this script is to generate an SDF for every URDF in the /urdf directory of inchworm_description. RViz needs URDFs to visualize properly,
  but the magnet sim requires SDFs to function properly*. Therefore we need a copy of each. URDF->SDF conversion is lossless, so we can automate the generation
  with this script using gazebo command line tools. This script wraps the generated <model> tag in a xacro macro with the filename, so that it can be invoked
  by a "master" SDF that will act as the parent model for all sub models. The `all_models.sdf` file is also generated by this script.
  '''

  rospack = rospkg.RosPack()

  desc_loc = rospack.get_path("inchworm_description")

  print(desc_loc)
  
  # Scan and grab every file that ends in .urdf in /urdf
  filenames = glob.glob(desc_loc + "/urdf/*.urdf")

  # For each URDF
  for urdf in filenames:
    sdf_filename = urdf.split("/")[-1][:-4] + "sdf"

    sdf_path = desc_loc + "/sdf/" + sdf_filename

    # Generate an SDF with command line interface
    proc = subprocess.Popen(["gz", "sdf", "-p", urdf], stdout=subprocess.PIPE)
    sdf_data = proc.stdout.read().decode("utf-8")

    # Convert into an XML object
    # Wrap the <model> tag with a <xacro:macro> tag
    new_sdf = insertXacroMacro(sdf_data, sdf_filename[:-3])
    #print(new_sdf)
    # Write the contents to `sdf/<same_name>.sdf`
    with open(sdf_path, 'w') as f:
      f.write(new_sdf)

  # Generate all_models.sdf file and write to sdf/all_models.sdf
    # Create SDF template
    # Within the master model, invoke each macro that was generated in the previous step

if __name__ == "__main__":
  main()